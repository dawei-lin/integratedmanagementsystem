package com.infinova.imscommon.beans;

public enum ReturnCodeType {

	//系统通用返回值
	NORMAL_STATE(0),
	SERVER_ERROR(-1),
	PARAMETER_INVALID(-2),
	ACCESS_DENIED(-3),
	NAME_REPEAT(-11),
	SUBSYS_DATA_ASS_EXIST(-18),
	RESOURCE_EXIST(-19),
	PERMISSION_ENTRY_NOT_ALLOW_DELETED(-20),
	PERMISSION_ENTRY_NOT_ALLOW_MODIFY(-21),
	ROLE_NOT_ALLOWED_MODIFIED(-22),
	ROLE_NOT_ALLOWED_DELETED(-23),
	CREATE_DIRECTORY_FAILED(-24),
	ILLEGAL_IP_OR_PORT(-25),
	RESOURCE_NOT_EXIST(-26),
	ILLEGAL_PORT(-27),
	ILLEGAL_IP(-28),
	OUT_OF_MAX_LENGTH(-29),
	RESOURCE_CANNOT_DELETE(-30),
	IP_ADDRESS_EXIST(-223),
	//用户、组织及安全模块返回值区间：-401~-500
	WRONG_USERNAME_OR_PSW(-421),
	NO_LOGIN_USER(-401),	
	EXCEED_MAX_LOGIN_SESSIONS(-422),
	SESSION_TIMEOUT(-423),	
	USER_PLAN_NO_INCLUDE(-430),
	READ_USER_PLAN_ERROR(-431),
	LACK_OF_RIGHTS(-440),
	ACCOUNT_EXPIRED(-441),
	LOGIN_OLD_PASSWORD_MSG(-442),
    LOGIN_OLD_NEW_PASSWORD_MSG(-443),
    NOT_ENOUGH_PERMISSION(-444),
	OTHER_SECUTITY_ERRORS(-450),
	USERNAME_EXIST(-470),
	ORGANIZATION_NAME_EXIST(-471),
	ORGANIZATION_CODE_EXIST(-472),
	ORGANIZATION_HAS_CHILD_NODE(-473),
	ORGANIZATION_DONOT_EXIST(-474),
	RESOURCEZONNING_EXIST(-475),
	RESOURCEZONNING_BE_SHARED(-476),
	PERMISSION_CODE_EXIST(-477),
	ORGANIZATION_PARENT_NOT_EXIST(-478),
	RESOURCEZONNING_NAME_EXIST(-479),
	ORG_RESOURCE_SHARED(-480),
	MAC_ADDRESS_BUNDLING(-481),
	USER_NOT_EXIST(-482),
	USER_IN_BLACKLIST(-483),
	IP_IN_BLACKLIST(-484),
	BLACKLIST_EXIST(-485),
	//园区楼栋模块返回值区间: -501~-510
	BUILDING_DELETE_NOT_ALLOW(-510),
	//通知公告模块返回值区间: -511~-520
	NOTICE_RESOURCE_NOT_EXIST(-518),
	NOTICE_MODIFY_NOT_ALLOW(-519),
	// 看板管理模块返回值区间: -521~-530
	BOARD_POSITION_ERROR(-521),
	PANEL_BOARD_REPEAT(-522),
	CANNOT_DELETE_FINAL_PANEL(-523),
	//地图模块返回值区间：-531~-540
	MAP_TYPE_IS_UNSUPPORTED(-531),
	RES_TYPE_UNEXIST(-533),
	BUILDING_CANNOT_IN_FLOOR(-534),
	//模板模块返回值区间:-541~-550
	TEMPLATE_ALREADY_EXISTED(-541),
	TEMPLATE_NOT_EXISTED(-542),
	
	MAP_FILE_IS_EMPTY(-603);
	
	private int code;

	ReturnCodeType(int code) {
		this.code = code;
	}

	public int getCode() {
		return code;
	}

	public String getStringCode() {
		return String.valueOf(code);
	}
	public void setCode(int code) {
		this.code = code;
	}

	public static ReturnCodeType getByCode(int code) {
		for (ReturnCodeType type : ReturnCodeType.values()) {
			if (type.getCode() == code) {
				return type;
			}
		}
		return ReturnCodeType.NORMAL_STATE;
	}

}
